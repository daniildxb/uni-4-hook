# for now this will only have a single entry with id "uniswap-v4-lending-hook"
type Protocol @entity(immutable: false) {
  id: ID!
  name: String!
  pools: [Pool!]! @derivedFrom(field: "protocol")
  totalValueLockedUSD: BigDecimal!
  # revenue generated by the protocol
  cumulativeFeeUSD: BigDecimal!
  # fees taken by the protocol
  cumulativeProtocolFeeUSD: BigDecimal!
  cumulativeVolumeUSD: BigDecimal!
  snapshots: [ProtocolHourlySnapshots!]! @derivedFrom(field: "protocol")
  lastSnapshotTimestamp: BigInt!
}

type ProtocolHourlySnapshots @entity(immutable: true) {
  # ID is hours from the unix epoch
  id: ID!
  protocol: Protocol!
  totalValueLockedUSD: BigDecimal!
  cumulativeFeeUSD: BigDecimal!
  cumulativeVolumeUSD: BigDecimal!
  cumulativeProtocolFeeUSD: BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Pool @entity(immutable: false) {
  id: ID!
  protocol: Protocol!
  hook: Bytes!
  token0: Token!
  token1: Token!
  aToken0: Token!
  aToken1: Token!
  tickSpacing: BigInt!
  fee: BigInt!
  shares: BigInt!
  # price of token0 in token1
  currentPrice: BigDecimal!
  # total amounts
  token0Amount: BigInt!
  token1Amount: BigInt!
  totalValueLockedUSD: BigDecimal!
  cumulativeSwapFeeUSD: BigDecimal!
  cumulativeLendingYieldUSD: BigDecimal!
  cumulativeVolumeUSD: BigDecimal!
  unclaimedProtocolFeeUSD: BigDecimal!
  claimedProtocolFeeUSD: BigDecimal!
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
  positions: [Position!]! @derivedFrom(field: "pool")
  snapshots: [PoolHourlySnapshots!]! @derivedFrom(field: "pool")
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  updatedAtTimestamp: BigInt!
  updatedAtBlockNumber: BigInt!
}

type PoolHourlySnapshots @entity(immutable: true) {
  # <poolId>-<hours_from_epoch>
  id: ID!
  pool: Pool!
  currentPrice: BigDecimal!
  rate: BigDecimal!
  shares: BigInt!
  totalValueLockedUSD: BigDecimal!
  cumulativeSwapFeeUSD: BigDecimal!
  cumulativeLendingYieldUSD: BigDecimal!
  cumulativeVolumeUSD: BigDecimal!
  unclaimedProtocolFeeUSD: BigDecimal!
  claimedProtocolFeeUSD: BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Token @entity(immutable: true) {
  id: ID!
  symbol: String!
  name: String!
  decimals: Int!
}

type Account @entity(immutable: true) {
  id: ID!
  positions: [Position!]! @derivedFrom(field: "account")
}

type Position @entity(immutable: false) {
  id: ID!
  account: Account!
  pool: Pool!
  # liquidity
  shares: BigInt!
  deposits: [Deposit!]! @derivedFrom(field: "position")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "position")
  outgoingTransfers: [Transfer!]! @derivedFrom(field: "senderPosition")
  incomingTransfers: [Transfer!]! @derivedFrom(field: "receiverPosition")
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  updatedAtTimestamp: BigInt!
  updatedAtBlockNumber: BigInt!
}

# position snapshots
# only track when position shares change
# for visualization we should rely on the pool snapshots
type PositionSnapshots @entity(immutable: true) {
  # <position_id>-<transaction_hash>-<log_index>
  id: ID!
  position: Position!
  shares: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Deposit @entity(immutable: true) {
  id: ID!
  account: Account!
  pool: Pool!
  position: Position!
  token0Amount: BigInt!
  token1Amount: BigInt!
  amountUSD: BigDecimal!
  shares: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type Withdrawal @entity(immutable: true) {
  id: ID!
  account: Account!
  pool: Pool!
  position: Position!
  token0Amount: BigInt!
  token1Amount: BigInt!
  amountUSD: BigDecimal!
  shares: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type Transfer @entity(immutable: true) {
  id: ID!
  sender: Account!
  receiver: Account!
  pool: Pool!
  senderPosition: Position!
  receiverPosition: Position!
  token0Amount: BigInt!
  token1Amount: BigInt!
  amountUSD: BigDecimal!
  shares: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type Swap @entity(immutable: true) {
  id: ID!
  pool: Pool!
  # delta of amounts of the pool
  # when swapping 0 -> 1, amount0 is negative and amount1 is positive
  token0Amount: BigInt!
  token1Amount: BigInt!
  amountUSD: BigDecimal!
  # fees paid in the input token (the one that's negative)
  fee: BigInt!
  sender: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
}
